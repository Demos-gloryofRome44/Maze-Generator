package backend.academy;

import backend.academy.console.ConsoleRenderer;
import backend.academy.enums.AlgoritmsGenerator;
import backend.academy.enums.AlgoritmsSolver;
import backend.academy.generator.Generator;
import backend.academy.generator.IdealGenerator;
import backend.academy.generator.KruskalGenerator;
import backend.academy.solver.BFSSolver;
import backend.academy.solver.BFSSolverNormal;
import backend.academy.solver.DFSSolver;
import backend.academy.solver.Solver;
import backend.academy.substance.Coordinate;
import backend.academy.substance.Maze;
import backend.academy.validator.InputValidator;
import backend.academy.validator.WallHandler;
import java.io.PrintStream;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import lombok.experimental.UtilityClass;


@UtilityClass
public class Main {
    private static final String ERROR_UNCKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ";

    public static void main(String[] args) {
        PrintStream out = System.out;

        out.println("–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ MAZE Generator:) \n–ø—Ä–µ–∂–¥–µ —á–µ–º —É–≤–ª–µ—á—å—Å—è —Ä–∞–±–æ—Ç–æ–π —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–∞–º–∏, "
            + "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω—Å–æ–ª—å\n"
            + "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∏—Å–ª–æ –Ω–∞ –≤—ã—Å–æ—Ç—É - 35 –∏ —à–∏—Ä–∏–Ω—É - 170\n"
            + "–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:\n"
            + "‚¨õ - —Å—Ç–µ–Ω–∞\n‚¨ú - –ø—Ä–æ—Ö–æ–¥\n"
            + "ü™ô - –º–æ–Ω–µ—Ç–∞ (—Å–∞–º–∞—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤—É)\n"
            + "üüß - –ø–µ—Å–æ–∫ (–º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, –Ω–æ –µ—Å–ª–∏ —É–≤—è–∑–Ω–µ—à—å —Å–∞–º –≤–∏–Ω–æ–≤–∞—Ç)\n"
            + "üü© - –ø—Ä–æ–π–¥–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\nüü¢ - –ø—Ä–æ–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞\nüî∂ - –ø—Ä–æ–π–¥–µ–Ω –ø–µ—Å–æ–∫");

        while (true) {
            out.println("----- –ó–∞–ø—É—Å–∫ MAZE Generator -----");
            Scanner scanner = new Scanner(System.in);
            int height = InputValidator.validateHeight(scanner, out);
            int width = InputValidator.validateWidth(scanner, out);

            int choiceGenerator = InputValidator.validateAlgoritmGeneratorChoice(scanner, out);
            AlgoritmsGenerator algoritm = AlgoritmsGenerator.fromValue(choiceGenerator);

            Maze maze;
            Generator generator;
            switch (algoritm) {
                case KRUSKAL:
                    generator = new KruskalGenerator();
                    maze = generator.generate(height, width);
                    out.println("–õ–∞–±–∏—Ä–∏–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ö—Ä—É—Å–∫–∞–ª–∞.");
                    break;
                case IDEAL:
                    generator = new IdealGenerator();
                    maze = generator.generate(height, width);
                    out.println("–õ–∞–±–∏—Ä–∏–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.");
                    break;
                default:
                    throw new IllegalStateException(ERROR_UNCKNOWN + algoritm);
            }

            out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç:");
            ConsoleRenderer renderer = new ConsoleRenderer();
            out.println(renderer.render(maze));

            WallHandler wallHandler = new WallHandler(maze);

            Coordinate startPoint = InputValidator.validateCoordinate(scanner, height, width,
                "–Ω–∞—á–∞–ª—å–Ω—É—é", "A", out);
            startPoint = wallHandler.checkAndModifyCellType(startPoint, "A", out);

            Coordinate endPoint = InputValidator.validateCoordinate(scanner, height, width,
                "–∫–æ–Ω–µ—á–Ω—É—é", "B", out);
            endPoint = wallHandler.checkAndModifyCellType(endPoint, "B", out);

            int choiceSolver = InputValidator.validateSolverChoice(scanner, out);

            AlgoritmsSolver algoritmsSolver = AlgoritmsSolver.fromValue(choiceSolver);

            List<Coordinate> path;
            List<Coordinate> path2;
            Solver solver;
            switch (algoritmsSolver) {
                case BFS:
                    solver = new BFSSolverNormal();
                    path = solver.solve(maze, startPoint, endPoint);

                    solver = new BFSSolver();
                    path2 = solver.solve(maze, startPoint, endPoint);
                    break;
                case DFS:
                    solver = new DFSSolver();
                    path = solver.solve(maze, startPoint, endPoint);
                    path2 = Collections.emptyList();
                    break;
                default:
                    throw new IllegalStateException(ERROR_UNCKNOWN + algoritm);
            }

            if (!path.isEmpty()) {
                out.println("–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:");
                out.println(renderer.renderWithPath(maze, path, startPoint, endPoint));
            } else {
                out.println("–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
            if (!path2.isEmpty()) {
                out.println("–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:");
                out.println(renderer.renderWithPath(maze, path2, startPoint, endPoint));
            } else {
                out.println("–ü—É—Ç—å —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }

            out.print("–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ª–∞–±–∏—Ä–∏–Ω—Ç? ([–î]–∞/[–ù]–µ—Ç): ");
            Scanner scanner1 = new Scanner(System.in);
            String answer = scanner1.nextLine().trim().toLowerCase();
            if (!answer.equalsIgnoreCase("–î") && !answer.equalsIgnoreCase("–î–∞")) {
                out.println("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–≤ ;)");
                scanner1.close();
                scanner.close();
                break;
            }

        }
    }
}
