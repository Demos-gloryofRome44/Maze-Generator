package backend.academy.samples;

import backend.academy.Cell;
import backend.academy.ConsoleRenderer;
import backend.academy.Coordinate;
import backend.academy.Maze;
import org.junit.jupiter.api.Test;

import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ConsoleRendererTest {

    // –¢–µ—Å—Ç –Ω–∞ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å –∏–Ω–µ–∫—Å–∞–º–∏ —Ä—è–¥–∞, –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ—Ö–æ–¥–∏–ª
    @Test
    public void testRenderMaze() {
        Maze maze = createSimpleMaze();
        ConsoleRenderer renderer = new ConsoleRenderer();

        String expectedOutput =
            "4 ‚¨õÔ∏è‚¨ú‚¨õÔ∏è‚¨ú‚¨õÔ∏è\n"
        + "3 ‚¨õÔ∏è‚¨ú‚¨õÔ∏è‚¨ú‚¨õÔ∏è\n"
        + "2 ‚¨õÔ∏è‚¨ú‚¨õÔ∏è‚¨ú‚¨õÔ∏è\n"
        + "1 ‚¨õÔ∏è‚¨ú‚¨õÔ∏è‚¨ú‚¨õÔ∏è\n"
        + "0 ‚¨õÔ∏è‚¨ú‚¨õÔ∏è‚¨ú‚¨õÔ∏è\n";

        String actualOutput = renderer.render(maze);
        assertEquals(expectedOutput, actualOutput, "The rendered maze should match the expected output.");
    }

    // –¢–µ—Å—Ç –Ω–∞ –≤—ã–≤–æ–¥ –ª–∞–±–∏—Ä–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    @Test
    public void testRenderWithPath() {
        Maze maze = createSimpleMaze();
        ConsoleRenderer renderer = new ConsoleRenderer();

        List<Coordinate> path = List.of(new Coordinate(1, 1), new Coordinate(2, 1));
        Coordinate start = new Coordinate(0, 1);
        Coordinate end = new Coordinate(3, 1);

        String expectedOutput =
            "4 ‚¨õ‚¨ú‚¨õ‚¨ú‚¨õ\n"
                + "3 ‚¨õüÖ±Ô∏è‚¨õ‚¨ú‚¨õ\n"
                + "2 ‚¨õüü©‚¨õ‚¨ú‚¨õ\n"
                + "1 ‚¨õüü©‚¨õ‚¨ú‚¨õ\n"
                + "0 ‚¨õüÖ∞Ô∏è‚¨õ‚¨ú‚¨õ\n";

        String actualOutput = renderer.renderWithPath(maze, path, start, end);
        assertEquals(expectedOutput, actualOutput, "The rendered maze with path should match the expected output.");
    }

    private Maze createSimpleMaze() {
        Maze maze = new Maze(5, 5);
        maze.setCell(0, 0, Cell.Type.WALL);
        maze.setCell(0, 1, Cell.Type.PASSAGE);
        maze.setCell(0, 2, Cell.Type.WALL);
        maze.setCell(0, 3, Cell.Type.PASSAGE);
        maze.setCell(0, 4, Cell.Type.WALL);

        maze.setCell(1, 0, Cell.Type.WALL);
        maze.setCell(1, 1, Cell.Type.PASSAGE);
        maze.setCell(1, 2, Cell.Type.WALL);
        maze.setCell(1, 3, Cell.Type.PASSAGE);
        maze.setCell(1, 4, Cell.Type.WALL);

        maze.setCell(2, 0, Cell.Type.WALL);
        maze.setCell(2, 1, Cell.Type.PASSAGE);
        maze.setCell(2, 2, Cell.Type.WALL);
        maze.setCell(2, 3, Cell.Type.PASSAGE);
        maze.setCell(2, 4, Cell.Type.WALL);

        maze.setCell(3, 0, Cell.Type.WALL);
        maze.setCell(3, 1, Cell.Type.PASSAGE);
        maze.setCell(3, 2, Cell.Type.WALL);
        maze.setCell(3, 3, Cell.Type.PASSAGE);
        maze.setCell(3, 4, Cell.Type.WALL);

        maze.setCell(4, 0, Cell.Type.WALL);
        maze.setCell(4, 1, Cell.Type.PASSAGE);
        maze.setCell(4, 2, Cell.Type.WALL);
        maze.setCell(4, 3, Cell.Type.PASSAGE);
        maze.setCell(4, 4, Cell.Type.WALL);

        return maze;
    }
}
