package backend.academy.samples;

import backend.academy.BFSSolver;
import backend.academy.BFSSolverNormal;
import backend.academy.Cell;
import backend.academy.ConsoleRenderer;
import backend.academy.Coordinate;
import backend.academy.DFSSolver;
import backend.academy.Maze;
import backend.academy.Solver;
import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class SolverTest {
    // –¢–µ—Å—Ç —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—à–µ–ª –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    @Test
    public void testPathExists() {
        Maze maze = createMazeWithPath();
        Coordinate start = new Coordinate(0, 0);
        Coordinate end = new Coordinate(4, 4);

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ BFS
        BFSSolverNormal bfsSolver = new BFSSolverNormal();
        List<Coordinate> pathbfs = bfsSolver.solve(maze, start, end);

        assertFalse(pathbfs.isEmpty(), "Path should exist but was not found.");
        assertEquals(end, pathbfs.get(pathbfs.size() - 1), "The last coordinate of the path should be the end coordinate.");

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DFS
        DFSSolver dfsSolver = new DFSSolver();
        List<Coordinate> pathdfs = dfsSolver.solve(maze, start, end);

        assertFalse(pathdfs.isEmpty(), "Path should exist but was not found.");
        assertEquals(end, pathdfs.get(pathbfs.size() - 1), "The last coordinate of the path should be the end coordinate.");
    }

    // –¢–µ—Å—Ç –Ω–∞ —Ç–æ –º–æ–∂–µ—Ç –ª–∏ —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º BFS –Ω–∞—Ö–æ–¥–∏—Ç—å –±–æ–ª–µ–µ –≤—ã–≥–æ–ª–Ω—ã–π –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    @Test
    void testPathWithType() {
        Maze maze = mazeSolveType();
        Coordinate start = new Coordinate(0, 0);
        Coordinate end = new Coordinate(4, 4);

        //–∞–ª–≥–æ—Ä–∏—Ç–º —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        BFSSolver solver = new BFSSolver();
        List<Coordinate> path = solver.solve(maze, start, end);

        assertFalse(path.isEmpty(), "Path should exist but was not found.");
        assertEquals(end, path.get(path.size() - 1), "The last coordinate of the path should be the end coordinate.");

        // —Å—Ä–∞–≤–Ω–∏–º –ø—É—Ç—å —Å –æ–±—ã—á–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º BFS –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—â–µ
        BFSSolverNormal bfsSolver = new BFSSolverNormal();
        List<Coordinate> pathbfs = bfsSolver.solve(maze, start, end);
        assertTrue(path.size() <= pathbfs.size());

        // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–≤—É—Ö –ø—É—Ç–µ–π —É—á–∏—Ç—ã–≤–∞—è –æ–±–ª–µ–≥—á–∞—é—â–∏–µ –∏ —É—Å–ª–æ–∂–Ω—è—é—â–∏–µ –ø–æ–≤–µ—Ä–∑–Ω–æ—Å—Ç–∏
        int normWeight = SumWeightPath(pathbfs);
        int idealWeight = SumWeightPath(path);

        assertTrue(idealWeight < normWeight);
    }

    // –¢–µ—Å—Ç —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞—à–µ–ª –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
    @Test
    public void testNoPath() {
        Maze maze = createMazeWithoutPath();
        Coordinate start = new Coordinate(0, 0);
        Coordinate end = new Coordinate(3, 1);

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ BFS
        BFSSolverNormal bfsSolver = new BFSSolverNormal();
        List<Coordinate> pathbfs = bfsSolver.solve(maze, start, end);

        assertTrue(pathbfs.isEmpty(), "Path should not exist but was found.");

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DFS
        DFSSolver dfsSolver = new DFSSolver();
        List<Coordinate> pathdfs = dfsSolver.solve(maze, start, end);

        assertTrue(pathdfs.isEmpty(), "Path should not exist but was found.");
    }

    private Maze createMazeWithPath() {
        Maze maze = new Maze(5, 5);
        maze.setCell(0, 0, Cell.Type.PASSAGE);
        maze.setCell(0, 1, Cell.Type.PASSAGE);
        maze.setCell(0, 2, Cell.Type.PASSAGE);
        maze.setCell(0, 3, Cell.Type.PASSAGE);
        maze.setCell(0, 4, Cell.Type.PASSAGE);
        maze.setCell(1, 0, Cell.Type.PASSAGE);
        maze.setCell(1, 1, Cell.Type.PASSAGE);
        maze.setCell(1, 2, Cell.Type.PASSAGE);
        maze.setCell(1, 3, Cell.Type.PASSAGE);
        maze.setCell(1, 4, Cell.Type.PASSAGE);
        maze.setCell(2, 0, Cell.Type.PASSAGE);
        maze.setCell(2, 1, Cell.Type.PASSAGE);
        maze.setCell(2, 2, Cell.Type.PASSAGE);
        maze.setCell(2, 3, Cell.Type.PASSAGE);
        maze.setCell(2, 4, Cell.Type.PASSAGE);
        maze.setCell(3, 0, Cell.Type.PASSAGE);
        maze.setCell(3, 1, Cell.Type.PASSAGE);
        maze.setCell(3, 2, Cell.Type.PASSAGE);
        maze.setCell(3, 3, Cell.Type.PASSAGE);
        maze.setCell(3, 4, Cell.Type.PASSAGE);
        maze.setCell(4, 0, Cell.Type.PASSAGE);
        maze.setCell(4, 1, Cell.Type.PASSAGE);
        maze.setCell(4, 2, Cell.Type.PASSAGE);
        maze.setCell(4, 3, Cell.Type.PASSAGE);
        maze.setCell(4, 4, Cell.Type.PASSAGE);

        return maze;
    }

    private Maze createMazeWithoutPath() {
        Maze maze = new Maze(5, 5);

        // –í—Å–µ —è—á–µ–π–∫–∏ - —Å—Ç–µ–Ω—ã
        for (int row = 0; row < 5; row++) {
            for (int col = 0; col < 5; col++) {
                maze.setCell(row, col, Cell.Type.WALL);
            }
        }

        maze.setCell(0, 0, Cell.Type.PASSAGE);
        maze.setCell(4, 4, Cell.Type.PASSAGE);

        return maze;
    }

    private Maze mazeSolveType() {
        Maze maze = new Maze(5, 5);

        maze.setCell(0, 0, Cell.Type.PASSAGE);
        maze.setCell(0, 1, Cell.Type.PASSAGE);
        maze.setCell(0, 2, Cell.Type.WALL);
        maze.setCell(0, 3, Cell.Type.WALL);
        maze.setCell(0, 4, Cell.Type.WALL);

        maze.setCell(1, 0, Cell.Type.COIN);
        maze.setCell(1, 1, Cell.Type.SAND);
        maze.setCell(1, 2, Cell.Type.PASSAGE);
        maze.setCell(1, 3, Cell.Type.WALL);
        maze.setCell(1, 4, Cell.Type.WALL);

        maze.setCell(2, 0, Cell.Type.PASSAGE);
        maze.setCell(2, 1, Cell.Type.WALL);
        maze.setCell(2, 2, Cell.Type.PASSAGE);
        maze.setCell(2, 3, Cell.Type.WALL);
        maze.setCell(2, 4, Cell.Type.WALL);

        maze.setCell(3, 0, Cell.Type.PASSAGE);
        maze.setCell(3, 1, Cell.Type.PASSAGE);
        maze.setCell(3, 2, Cell.Type.PASSAGE);
        maze.setCell(3, 3, Cell.Type.PASSAGE);
        maze.setCell(3, 4, Cell.Type.PASSAGE);
        maze.setCell(4, 0, Cell.Type.PASSAGE);
        maze.setCell(4, 1, Cell.Type.PASSAGE);
        maze.setCell(4, 2, Cell.Type.PASSAGE);
        maze.setCell(4, 3, Cell.Type.PASSAGE);
        maze.setCell(4, 4, Cell.Type.PASSAGE);

        String example =
            "‚¨ú‚¨ú‚¨õ‚¨õ‚¨õ"
                + "ü™ôüüß‚¨ú‚¨õ‚¨õ"
                + "‚¨ú‚¨õ‚¨ú‚¨õ‚¨õ"
                + "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú"
                + "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú";

        return maze;
    }

    private int SumWeightPath(List<Coordinate> path) {
        Maze maze = mazeSolveType();

        int totalWeight = 0;

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø—É—Ç–∏
        for (Coordinate coord : path) {
            Cell cellType = maze.getCell(coord.row(), coord.col()); // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —è—á–µ–π–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            if (cellType.getType() == Cell.Type.PASSAGE) {
                totalWeight += 2;
            }
            else if (cellType.getType() == Cell.Type.COIN) {
                totalWeight += 0;
            }
            else {
                totalWeight += 4;
            }
        }

        return totalWeight;
    }
}
